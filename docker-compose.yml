version: "3"
services:
  setup:
    profiles:
      - all
      - elasticsearch_only
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - ./certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: es02\n"\
          "    dns:\n"\
          "      - es02\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: es03\n"\
          "    dns:\n"\
          "      - es03\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R ubuntu:ubuntu config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt ${HTTP_PROTOCOL}://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" ${HTTP_PROTOCOL}://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    networks:
      - elastic-jaeger
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120

  es01:
    profiles:
      - all
      - elasticsearch_only
    depends_on:
      setup:
        condition: service_healthy
    #image: docker.elastic.co/elasticsearch/elasticsearch:7.9.3
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    networks:
      - elastic-jaeger
    ports:
      - "127.0.0.1:9200:9200"
      - "127.0.0.1:9300:9300"
    restart: on-failure
    environment:
      - discovery.type=single-node
      - http.host=0.0.0.0
      - transport.host=127.0.0.1
      - ES_JAVA_OPTS=-Xms4g -Xmx4g
      - cluster.name=${CLUSTER_NAME}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=false
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=false
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.client_authentication=optional
      - xpack.license.self_generated.type=${LICENSE}
      #- xpack.security.enrollment.enabled=true
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt ${HTTP_PROTOCOL}://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    mem_limit: 8g
    volumes:
      - ./certs:/usr/share/elasticsearch/config/certs
      - ./data:/usr/share/elasticsearch/data
      #- /mnt/extension/esdata4:/usr/share/elasticsearch/data

  kibana:
    profiles:
      - all
      - elasticsearch_only
    depends_on:
      es01:
        condition: service_healthy
    #image: docker.elastic.co/kibana/kibana:8.15.2
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    volumes:
      - ./certs:/usr/share/kibana/config/certs
      - ./kibanadata:/usr/share/kibana/data
    user: "1000"
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      #- SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=${HTTP_PROTOCOL}://es01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      #- elasticsearch.ssl.verificationMode=none
    networks:
      - elastic-jaeger
    mem_limit: 2g
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  jaeger-collector:
    profiles:
      - all
    image: jaegertracing/jaeger-collector
    ports:
      - "14269:14269"
      - "14268:14268"
      - "14267:14267"
      - "14250:14250"
      - "9411:9411"
      - "4317:4317"
    networks:
      - elastic-jaeger
    restart: on-failure
    environment:
      - SPAN_STORAGE_TYPE=elasticsearch
    mem_limit: 2g
    command: [
      "--es.server-urls=${HTTP_PROTOCOL}://es01:9200",
      "--es.num-shards=5",
      "--es.num-replicas=0",
      "--es.username=elastic",
      "--es.password=password",
      "--es.version=8",
      "--es.index-rollover-frequency-spans=hour",
      "--log-level=error",
      "--es.tags-as-fields.all=true",
      "--es.create-index-templates=false",
    ]
    depends_on:
      es01:
        condition: service_healthy

  jaeger-query:
    profiles:
      - all
    image: jaegertracing/jaeger-query
    environment:
      - SPAN_STORAGE_TYPE=elasticsearch
      - no_proxy=localhost
    mem_limit: 2g
    ports:
      - "6686:16686"
      - "6687:16687"
    networks:
      - elastic-jaeger
    restart: on-failure
    command: [
      "--es.server-urls=${HTTP_PROTOCOL}://es01:9200",
      "--es.num-shards=5",
      "--es.num-replicas=0",
      "--es.username=elastic",
      "--es.password=password",
      "--span-storage.type=elasticsearch",
      "--es.index-rollover-frequency-spans=hour",
      "--es.tags-as-fields.all=true",
      "--es.version=8",
      "--log-level=debug"
    ]
    depends_on:
      es01:
        condition: service_healthy

networks:
  elastic-jaeger:
    driver: bridge